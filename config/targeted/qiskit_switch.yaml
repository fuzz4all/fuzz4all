# This file includes the configuration parameters for the fuzzing approach

# --------------------------------------------------------------------------- #
# Configuration of the overall fuzzing setup
fuzzing:
  # where to store the results (relative to the where you are calling fuzz.py)
  output_folder: Results/qiskit/switch
  # number of fuzzing iterations
  num: 10000
  # total fuzzing time in hours
  total_time: 24
  # level of logging: 1 = INFO, 2 = TRACE, 3 = VERBOSE
  log_level: 3
  # use to validate fuzzing outputs on the fly.
  # If flag not set then only generation will be done. (Default: false)
  otf: true
  # use to resume a previous fuzzing run.
  # If flag not set then a new fuzzing run will be started (Default: false)
  resume: true
  # use to evaluate the fuzzing results.
  # If flag not set then no evaluation will be done (Default: false)
  evaluate: false
  # use hand-written prompt to query the coder model
  use_hand_written_prompt: false
  # whether to use only trigger_to_generate_input and input_hint, without the
  # any documentation information or example code
  no_input_prompt: false
  # prompt strategy to generate obtain programs after the first one.
  # 0: generate new code using separator
  # 1: mutate existing code
  # 2: semantically equivalent code generation
  # 3: combine previous two code generations
  prompt_strategy: 2



# --------------------------------------------------------------------------- #
# Configuration of the target system
target:
  # language to fuzz, currently supported: cpp, smt2, java, go
  language: qiskit
  # path to documentation of the feature of the target system
  # (Relative to the root of the fuzzing framework)
  path_documentation: config/documentation/qiskit/qiskit_switch.md
  # path to the example code using the feature of the target system
  # (Relative to the root of the fuzzing framework)
  path_example_code:
  # path to the command to push the coder to generate the input for the
  # target system using the given feature
  trigger_to_generate_input: "'''Create quantum circuit in Qiskit in Python that uses the switch API.'''"
  # hint to give to the coder to generate the input for the target system
  input_hint: "from qiskit import QuantumCircuit\n"
  # path to the hand-written prompt to give to the coder
  # (Relative to the root of the fuzzing framework)
  path_hand_written_prompt: config/documentation/qiskit/qiskit_switch_shorten.md
  # string to check if the generated input is valid. If the string is present
  # in the generated input, the input is considered valid.
  target_string: ".switch("  # always true
  # which oracle to use (this option is working only for certain targets)
  # - crash: check if the target system crashes
  # - diff: check if the output of the target system is different from the
  #         output of the reference system
  # - metamorphic: check if the output of the target system is different from
  #                the output of the reference system, but the difference is
  #                due to a metamorphic relation
  # - opt_and_qasm: apply the metarmorphic relation on each circuit in the global scope, and also try to optimize each circuit
  oracle: opt_and_qasm



# --------------------------------------------------------------------------- #
# Configuration of the Large Language Model (coder) setup
coder:
  # temperature to query the coder model when generating output.
  temperature: 1
  # batch size
  batch_size: 30
  # use hardware acceleration (GPU) for the coder model
  device: cuda
  # model name according to the HuggingFace model hub
  coder_name: bigcode/starcoderbase
  # local model folder (absolute path)
  # if not set, the model will be downloaded from the HuggingFace model hub
  # model_folder: /home/username/local_model_repository
  # additional end of sequence tokens
  # additional_eos_tokens:
  #   - "<eom>"
  # maximum length of the generated coder output
  max_length: 1024
